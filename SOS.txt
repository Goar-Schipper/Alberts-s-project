"use client";

import React, { useEffect, useState } from "react";
import {
  addItem,
  deleteItem,
  addToSlideShow,
  getItems,
  addMessage,
  getAllMessages,
  deleteMessage,
} from "./logic.";
export default function page() {
  const [newItem, setNewItem] = useState("");
  const [newMessage, setNewMessage] = useState("");
  const [images, setImages] = useState([]);
  const [slideshow, setSlideShow] = useState([]);
  const [incomingMessage, setIncomingMessage] = useState([]);

  // auth
  const [pass, setPass] = useState("hond");
  const [passField, setPassField] = useState("");
  const [authState, setAuthState] = useState(false);

  const handleAuth = function (e) {
    e.preventDefault();
    if (passField === pass) {
      alert("Welcome admin ");
      setAuthState(true);
      setPassField("");
    } else {
      alert("password incorrect");
      setAuthState(false);
    }
  };

  const handleUpload = async (e) => {
    e.preventDefault();
    console.log("clicked handle upload");

    // Check if files are present
    if (newItem) {
      // Access the file from the event's target files array
      const file = newItem;

      const reader = new FileReader();
      reader.onload = async (event) => {
        const dataUrl = event.target.result;

        console.log("File:", file); // Log the file information here

        // Call addItem with the data URL
        await addItem(dataUrl);

        // Clear the input field and reload the page
        setNewItem("");
        window.location.reload();
      };

      reader.readAsDataURL(file);
    } else {
      console.error("No files selected.");
    }
  };

  const UploadMessage = async (e) => {
    e.preventDefault();
    await addMessage(newMessage);
    setNewMessage("");
    window.location.reload();
  };

  // get images
  useEffect(() => {
    const fetchImages = async () => {
      try {
        const imagesArr = await getItems();
        setImages(imagesArr);
      } catch (err) {
        console.error("error fetching images", err.message);
      }
    };
    fetchImages();
  }, []);

  // handle delete
  const handleDelete = async (id) => {
    try {
      await deleteItem(id);
      setImages((prevImages) => prevImages.filter((image) => image.id !== id));
    } catch (err) {
      console.error(err);
    }
  };

  const handleAddToSlideshow = async (id) => {
    try {
      const selectedImage = images.find((image) => image.id === id);
      if (selectedImage) {
        // Update the slideshow state with only the selected image
        setSlideShow([selectedImage]);
        console.log([selectedImage]);

        // Call addToSlideShow with the selected image
        addToSlideShow([selectedImage]);
      }
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    const fetchMessages = async function () {
      try {
        const messages = await getAllMessages();
        setIncomingMessage(messages);
      } catch (err) {
        console.error(err);
      }
    };
    fetchMessages();
  }, []);

  const handleDeleteMsg = async function (id) {
    try {
      await deleteMessage(id);
      setIncomingMessage((prevIncomingMessage) =>
        prevIncomingMessage.filter(
          (incomingMessage) => incomingMessage.id !== id
        )
      );
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div>
      {authState ? (
        <>
          <p>Welcome admin</p>
          <form method="post">
            Image:
            <input
              type="file"
              id="file"
              accept="*/*"
              onChange={(e) => setNewItem(e.target.files[0])}
            />
            <button onClick={handleUpload}>Upload Image</button>
          </form>

          <form method="post">
            Message:
            <input
              type="text"
              id="message"
              onChange={(e) => setNewMessage(e.target.value)}
            />
            <button onClick={UploadMessage}>Upload Message</button>
          </form>

          {/* images */}
          <div className="flex flex-col gap-5">
            {images.map((image, index) => (
              <div key={index} className="flex gap-5">
                <img src={image.url} className="max-w-[200px]" />
                <button onClick={() => handleDelete(image.id)}>
                  Delete slide
                </button>
                <button onClick={() => handleAddToSlideshow(image.id)}>
                  Add to slideshow
                </button>
              </div>
            ))}

            {/* messages */}
            {incomingMessage.map((msg, index) => (
              <div key={index}>
                <p>{msg.message}</p>
                <button onClick={() => handleDeleteMsg(msg.id)}>Delete</button>
              </div>
            ))}
          </div>
        </>
      ) : (
        <form method="post">
          <input
            type="password"
            onChange={(e) => setPassField(e.target.value)}
          ></input>
          <button onClick={handleAuth}>Login</button>
        </form>
      )}
    </div>
  );
}
